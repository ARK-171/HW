  
import pygame
import os
import random
import math

dir_path = os.path.dirname(__file__)
fps = pygame.time.Clock()
FPS = 80

WIDTH = 900
HEIGHT = 600

WorldWidth = 1800
WorldHeight = 1200

class Camera:
    def __init__(self):
        self.x = 0
        self.y = 0
    def update(self, sprite):
        if sprite.rect.x < WorldWidth - WIDTH/2 and sprite.rect.x > WIDTH/2:
            self.x = int(WIDTH/2) - sprite.rect.x
        if sprite.rect.y < WorldHeight - HEIGHT/2 and sprite.rect.y > HEIGHT/2:
            self.y = HEIGHT/2 - sprite.rect.y

class Player:
    def __init__(self, speed):
        self.picture = [pygame.image.load(os.path.join(dir_path, "sprites\mage.png")),
                        pygame.image.load(os.path.join(dir_path, "sprites\mage2.png"))]
        l = 0
        for i in self.picture:
            self.picture[l] = pygame.transform.scale(i, (128, 128))
            l += 1
        self.picture1 = [pygame.transform.flip(z, True, False) for z in self.picture]
        self.HP = 100
        self.speed = speed
        self.x = 100
        self.y = 100
        self.state = 0
        self.tik = 0
        self.reload = 0
        self.rect = self.picture[0].get_rect(topleft = (self.x, self.y))
        self.jump = 0
    def muve(self):
        if self.jump > 0:
            self.y -= 10
            self.jump -= 10
        elif self.jump == 0:
            self.y += 5
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RIGHT]:
            self.picture = [pygame.image.load(os.path.join(dir_path, "sprites\mage.png")),
                            pygame.image.load(os.path.join(dir_path, "sprites\mage2.png"))]
            l = 0
            for i in self.picture:
                self.picture[l] = pygame.transform.scale(i, (128, 128))
                l += 1
            self.x += self.speed
            self.state = 1
        if keys[pygame.K_LEFT]:
            self.picture = self.picture1
            self.x -= self.speed
            self.state = -1
    def jumpe(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP]:
            if self.jump == 0:
                self.jump = 200
    def showe(self):
        if self.tik < 240:
            self.tik += 1
            win.blit(self.picture[0], (self.x, self.y))
        elif self.tik == 240 or self.tik < 260:
            win.blit(self.picture[1], (self.x, self.y))
            self.tik += 1
        else:
            self.tik = 0
            win.blit(self.picture[0], (self.x, self.y))

class fire_ball:
    def __init__(self, x, y, speed, side):
        self.picture = [pygame.image.load(os.path.join(dir_path, "sprites/fb0.png")),
                        pygame.image.load(os.path.join(dir_path, "sprites/fb1.png")),
                        pygame.image.load(os.path.join(dir_path, "sprites/fb2.png")),
                        pygame.image.load(os.path.join(dir_path, "sprites/fb3.png"))]
        l = 0
        for i in self.picture:
            self.picture[l] = pygame.transform.scale(i, (128, 128))
            l += 1
        self.picture1 = [pygame.transform.flip(z, True, False) for z in self.picture]
        self.x = x
        self.y = y
        self.speed = speed
        self.damage = 20
        self.l = 0
        self.state = 0
        self.side = side
    def move(self):
        if self.side == 1 and self.l <= 700:
            self.x += self.speed
            self.l += self.speed
        elif self.side == -1 and self.l <= 700:
            self.picture = self.picture1
            self.x -= self.speed
            self.l += self.speed
    def showe(self):
        self.state += 1
        if self.state == 4:
            self.state = 0
        win.blit(self.picture[self.state], (self.x, self.y))

class erth:
    def __init__(self, x , y):
        self.picture = pygame.image.load(os.path.join(dir_path, "sprites/rock.png"))
        self.x = x
        self.y = y
        self.rect = self.picture.get_rect(topleft = (self.x, self.y))
    def showe(self):
         win.blit(self.picture, (self.x, self.y))

class meteor:
    def __init__(self):
        self.picture = pygame.transform.scale(pygame.image.load(os.path.join(dir_path, "sprites/meteor.png")), (64,64))
        self.picture.set_colorkey((255,255,255))
        self.x = -80
        self.y = 800
        self.speedy = 0
        self.speedx = 0
        self.damage = 20
        self.angle = 0
        self.state = 90
    def fall(self):
        if self.y < 700 and self.x < 1279 and self.x > -100:
            self.y += self.speedy * -3
            self.x += self.speedx * 3
        else:
            self.y = 0
            self.x = random.randint(0,1279)
            self.speedy = -random.random()
            self.speedx = math.sqrt(1 - self.speedy*self.speedy) * random.choice([-1,1])
            if self.speedx > 0:
                self.state = 90
            else:
                self.state = -90
            self.angle = math.degrees(math.atan(self.speedy/self.speedx)) + self.state
    def showe(self):
        win.blit(pygame.transform.rotate(self.picture, self.angle), (self.x, self.y))
        
def fb():
    if player.reload < 80:
        player.reload += 1
    key = pygame.key.get_pressed()
    if key[pygame.K_SPACE] and player.reload == 80:
        fireBall.append(fire_ball(player.x, player.y, 6, player.state))
        player.reload = 0

def colider(Sprite1, Sprite2):
    if (Sprite2.y + 10 >= Sprite1.y + Sprite1.rect.height >= Sprite2.y) and (Sprite2.x <= Sprite1.x <= Sprite2.x + Sprite2.rect.width or Sprite2.x <= Sprite1.x + Sprite1.rect.width <= Sprite2.x + Sprite2.rect.width):
        Sprite1.y = Sprite2.y - Sprite1.rect.height
        Sprite1.jumpe()
    elif (Sprite2.y + Sprite2.rect.height - 10 <= Sprite1.y <= Sprite2.y + Sprite2.rect.height) and (Sprite2.x <= Sprite1.x <= Sprite2.x + Sprite2.rect.width or Sprite2.x <= Sprite1.x + Sprite1.rect.width <= Sprite2.x + Sprite2.rect.width):
        Sprite1.y = Sprite2.y + Sprite2.rect.height + 10
    elif (Sprite2.x <= Sprite1.x + Sprite1.rect.width <= Sprite2.x + 10) and (Sprite1.y <= Sprite2.y + Sprite2.rect.height <= Sprite1.y + Sprite1.rect.height or Sprite1.y <= Sprite2.y <= Sprite1.y + Sprite1.rect.height):
        Sprite1.x = Sprite2.x - Sprite1.rect.width
    elif (Sprite2.x + Sprite2.rect.width - 10 <= Sprite1.x <= Sprite2.x + Sprite2.rect.width) and (Sprite1.y <= Sprite2.y + Sprite2.rect.height <= Sprite1.y + Sprite1.rect.height or Sprite1.y <= Sprite2.y <= Sprite1.y + Sprite1.rect.height):
        Sprite1.x = Sprite2.x + Sprite2.rect.width

win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('Первая игра на Питоне') 

game = True
player = Player(3)
fireBall = []
ground = []
meteo = []
x = -256

for i in range (0, 10):
    ground.append(erth(x+256, 600))
    x += 256
for i in range(0,10):
    meteo.append(meteor())

World = pygame.Surface((WorldWidth, WorldHeight))
cam = Camera()

while game:
    fps.tick(FPS)
    player.muve()
    win.fill((0,0,0))
    World.fill((0,0,0))
    World.blit(player.picture[0], player.rect)
    cam.update(player)

    win.blit(World, (cam.x,cam.y))
    player.showe()
    fb()
    for i in range(0, len(ground)):
        ground[i].showe()
        colider(player, ground[i])
    if len(fireBall) != 0:
        for i in range(0, len(fireBall), 2):
            fireBall[i].move()
            fireBall[i].showe()
            if fireBall[i].l >= 700:
                fireBall.pop(i)
    for i in meteo:
        i.fall()
        i.showe()

    for evente in pygame.event.get():
        if evente.type == pygame.QUIT:
            game = False

    pygame.display.update()
pygame.quit()
